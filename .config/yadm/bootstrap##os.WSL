#!/bin/sh

### VARIABLES & CONSTANTS ###

OS=$(uname -s)
USER=$(id -u -n)

GIT_USER="brikehn"
GIT_REPO="dotfiles"

## Colors
BLUE="$(tput setaf 4)"
YELLOW="$(tput setaf 3)"
GREEN="$(tput setaf 2)"
RED="$(tput setaf 1)"
NONE="$(tput sgr0)"

# Set XDG directories.
export XDG_CONFIG_HOME="${HOME}/.config"
export XDG_CACHE_HOME="${HOME}/.cache"
export XDG_DATA_HOME="${HOME}/.local/share"

# Set Zsh configuration directory.
export ZDOTDIR="${HOME}/.config/zsh"

pkg_list=(
  "git"
  "zsh"
  "zsh-completions"
  "zsh-syntax-highlighting"
  "zsh-autosuggestions"
  "starship"
  "tmux"
  "neovim"
  "nodejs"
  "npm"
  "yarn"
  "unzip"
  "ripgrep"
  "openssh"
  "docker"
  "docker-compose"
  "gnupg"
  "fzy"
  "shfmt"
)

aur_pkg_list=(
  "lua-format"
)

### FUNCTIONS ###

print_msg() {
  printf "${GREEN}=>${NONE} %s\n" "${@}" >&1
}

print_error() {
  printf "${RED}=> ERROR:${NONE} %s\n" "${@}" >&2
}

pac_install() {
  print_msg "Updating package database..."
  sudo pacman -Syyu --noconfirm
  print_msg "Installing packages..."
  sudo pacman -S --needed --noconfirm "${pkg_list[@]}"
}

aur_install() {
  print_msg "Installing AUR packages..."
  yay -S --needed --noconfirm "${aur_pkg_list[@]}"
}

bootstrap_zsh() {
  print_msg "Bootstrapping Zsh..."
  print_msg "Setting Zsh as default shell..."
  zsh_dotfiles=(".zsh" ".zlogin" ".zlogout" ".zshenv" ".zshrc")
  # Delete default Zsh configuration files if present.
  for file in "${zsh_dotfiles[@]}"; do
    [ -e "${HOME}/${file}" ] && rm -rf "${HOME:?}/${file}" >/dev/null 2>&1
  done
  sudo chsh -s /bin/zsh "${USER}"
}

bootstrap_neovim() {
  print_msg "Bootstrapping Neovim..."
  print_msg "Installing Neovim plugin manager..."
  [ ! -d "${XDG_DATA_HOME}/nvim/site/pack/packer/start/packer.nvim" ] \
    && git clone https://github.com/wbthomason/packer.nvim \
      "${XDG_DATA_HOME}/nvim/site/pack/packer/start/packer.nvim"
  print_msg "Installing Neovim plugins..."
  nvim \
    -u "${XDG_CONFIG_HOME}/nvim/lua/plugins.lua" \
    -c "packadd packer.nvim" \
    +"autocmd User PackerComplete | qall" \
    +PackerSync
  curl -sLo/tmp/win32yank.zip https://github.com/equalsraf/win32yank/releases/download/v0.0.4/win32yank-x64.zip
  unzip -p /tmp/win32yank.zip win32yank.exe > /tmp/win32yank.exe
  chmod +x /tmp/win32yank.exe
  sudo mv /tmp/win32yank.exe /usr/local/bin/
}

bootstrap_docker() {
  print_msg "Bootstrapping Docker..."
  # Allow 'sudo dockerd' to be run without password
  sudo -u root 'echo "%docker ALL=(ALL) NOPASSWD: /usr/bin/dockerd" >/etc/sudoers.d/docker'
}

cleanup_options() {
  printf "${YELLOW}%s${NONE}\n" "Cleanup home directory?">&1
  printf "${YELLOW}  y)${NONE}  %s\n" "Yes. This removes unused dotfiles." >&1
  printf "${YELLOW}  n)${NONE}  %s\n\n" "No. Skip this step and leave all existing dotfiles as is." >&1
}

cleanup_home() {
  dotfiles=(".bash_history" ".bash_logout" ".bash_profile" ".bashrc" \
  "README.md" "LICENSE" ".gitconfig" ".profile" ".vim" ".viminfo" ".vimrc")
  found=0 # Set to 1 if file found in the for loop.
  # Find any pre-existing dotfiles.
  for file in "${dotfiles[@]}"; do
    if [ -e "${HOME}/${file}" ]; then
      found=1; break
    fi
  done
  # If true, offer to cleanup home directory.
  if [ "${found}" = 1 ]; then
    cleanup_options
    while [ -z "${cleanup_option}" ]; do
      printf "  %s${YELLOW} %s${NONE}: " "Option" "[y/n]"
      read -r opt
      case "${opt}" in
        [y]|[Y]*) cleanup_option=1 ;;
        [n]|[N]*) cleanup_option=2 ;;
        *) printf "Invalid option '${opt}'.\n" >&2; cleanup_options ;;
      esac
    done
    if [ "${cleanup_option}" = 1 ]; then
      print_msg "Cleaning home directory..."
      # Cleanup user's home directory.
      for file in "${dotfiles[@]}"; do
        [ -e "${HOME}/${file}" ] && rm -ri "${HOME:?}/${file}"
      done
    fi
  fi
}

update_yadm_repo() {
  print_msg "Updating yadm index..."
  sudo -Hu "${USERNAME}" yadm update-index --assume-unchanged \
    "${HOME}/.config/yadm/bootstrap" "${HOME}/README.md" "${HOME}/LICENSE" \
    "${HOME}/.config/zsh/zsh-aliases"
}

goodbye() {
  print_msg "Successfully installed dotfiles!"
}

### MAIN ###

pac_install
aur_install
bootstrap_zsh
bootstrap_neovim
cleanup_home
update_yadm_repo
goodbye
